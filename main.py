import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import random
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TOKEN = ''  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π)
questions = [
    {
        "text": "–ì–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∂–∏—Ç—å?",
        "options": {
            "–í –¥–∂—É–Ω–≥–ª—è—Ö üå≥": {"—Å–∏–ª–∞": 5, "—Å–∫–æ—Ä–æ—Å—Ç—å": 4, "–¥–æ–±—Ä–æ—Ç–∞": 1, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
            "–ù–∞ –Æ–∂–Ω–æ–º –ø–æ–ª—é—Å–µ ‚ùÑÔ∏è": {"—Å–∏–ª–∞": 1, "—Å–∫–æ—Ä–æ—Å—Ç—å": 2, "–¥–æ–±—Ä–æ—Ç–∞": 5, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 6},
            "–í —Å–∞–≤–∞–Ω–Ω–µ üåÑ": {"—Å–∏–ª–∞": 8, "—Å–∫–æ—Ä–æ—Å—Ç—å": 3, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 2},
            "–í —Ç–∏—Ö–æ–º –ª–µ—Å—É üå≤": {"—Å–∏–ª–∞": 3, "—Å–∫–æ—Ä–æ—Å—Ç—å": 5, "–¥–æ–±—Ä–æ—Ç–∞": 4, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 3},
        },
        "sticker": "CAACAgIAAxkBAAEM-5tnwDa7d6wvFB73SDzpQXIxgtvZswACDQEAAvR7GQABJ6-MCHZ-F9A2BA"
    },
    {
        "text": "–ö–∞–∫–∞—è —É –≤–∞—Å –ª—é–±–∏–º–∞—è –µ–¥–∞?",
        "options": {
            "–ú—è—Å–æ üçñ": {"—Å–∏–ª–∞": 7, "—Å–∫–æ—Ä–æ—Å—Ç—å": 6, "–¥–æ–±—Ä–æ—Ç–∞": 1, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
            "–†—ã–±–∞ üêü": {"—Å–∏–ª–∞": 1, "—Å–∫–æ—Ä–æ—Å—Ç—å": 3, "–¥–æ–±—Ä–æ—Ç–∞": 5, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 6},
            "–§—Ä—É–∫—Ç—ã üçå": {"—Å–∏–ª–∞": 2, "—Å–∫–æ—Ä–æ—Å—Ç—å": 4, "–¥–æ–±—Ä–æ—Ç–∞": 7, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 3},
            "–û–≤–æ—â–∏ ü•ï": {"—Å–∏–ª–∞": 3, "—Å–∫–æ—Ä–æ—Å—Ç—å": 5, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
        },
        "sticker": "CAACAgIAAxkBAAEM-5lnwDZsXTCylUEXDtOrodb5-HbGgAACJwEAAlKJkSMTI3f3KnjQfTYE"
    },
    {
        "text": "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è?",
        "options": {
            "–ê–∫—Ç–∏–≤–Ω–æ üí™": {"—Å–∏–ª–∞": 6, "—Å–∫–æ—Ä–æ—Å—Ç—å": 7, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
            "–°–ø–æ–∫–æ–π–Ω–æ üõÄ": {"—Å–∏–ª–∞": 1, "—Å–∫–æ—Ä–æ—Å—Ç—å": 1, "–¥–æ–±—Ä–æ—Ç–∞": 6, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 7},
            "–û–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ üë•": {"—Å–∏–ª–∞": 2, "—Å–∫–æ—Ä–æ—Å—Ç—å": 3, "–¥–æ–±—Ä–æ—Ç–∞": 5, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 6},
            "–ù–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –ø—Ä–∏—Ä–æ–¥–æ–π üåø": {"—Å–∏–ª–∞": 3, "—Å–∫–æ—Ä–æ—Å—Ç—å": 5, "–¥–æ–±—Ä–æ—Ç–∞": 8, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 2},
        },
        "sticker": "CAACAgIAAxkBAAEM-59nwDb8HSCU-54jPcCRWhsimBaScAACPQEAAvR7GQABTAIrXSxZ6IA2BA"
    },
    {
        "text": "–ö–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–º –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?",
        "options": {
            "–°–∏–ª–∞ üí™": {"—Å–∏–ª–∞": 8, "—Å–∫–æ—Ä–æ—Å—Ç—å": 2, "–¥–æ–±—Ä–æ—Ç–∞": 1, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
            "–£–º üß†": {"—Å–∏–ª–∞": 1, "—Å–∫–æ—Ä–æ—Å—Ç—å": 4, "–¥–æ–±—Ä–æ—Ç–∞": 6, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 7},
            "–î–æ–±—Ä–æ—Ç–∞ ‚ù§Ô∏è": {"—Å–∏–ª–∞": 3, "—Å–∫–æ—Ä–æ—Å—Ç—å": 5, "–¥–æ–±—Ä–æ—Ç–∞": 7, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 3},
            "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å üöÄ": {"—Å–∏–ª–∞": 4, "—Å–∫–æ—Ä–æ—Å—Ç—å": 6, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
        },
        "sticker": "CAACAgIAAxkBAAEM-51nwDbc1Ahp2KdyJibHHVQtHWZXFgAC6gAD9HsZAAFjsXea7HRT1zYE"
    },
    {
        "text": "–ö–∞–∫—É—é –ø–æ–≥–æ–¥—É –≤—ã –ª—é–±–∏—Ç–µ?",
        "options": {
            "–¢—ë–ø–ª—É—é ‚òÄÔ∏è": {"—Å–∏–ª–∞": 3, "—Å–∫–æ—Ä–æ—Å—Ç—å": 4, "–¥–æ–±—Ä–æ—Ç–∞": 3, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 4},
            "–•–æ–ª–æ–¥–Ω—É—é ‚ùÑÔ∏è": {"—Å–∏–ª–∞": 1, "—Å–∫–æ—Ä–æ—Å—Ç—å": 2, "–¥–æ–±—Ä–æ—Ç–∞": 6, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 6},
            "–î–æ–∂–¥–ª–∏–≤—É—é ‚õàÔ∏è": {"—Å–∏–ª–∞": 2, "—Å–∫–æ—Ä–æ—Å—Ç—å": 5, "–¥–æ–±—Ä–æ—Ç–∞": 5, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 3},
            "–í–µ—Ç—Ä–µ–Ω—É—é üå¨Ô∏è": {"—Å–∏–ª–∞": 4, "—Å–∫–æ—Ä–æ—Å—Ç—å": 6, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},
        },
        "sticker": "CAACAgIAAxkBAAEM-6FnwDcVMgR87ehDGmQf3d6fSR2PZgAC8AAD9HsZAAEuvf-jtAjUeTYE"
    },
]

# –°–ª–æ–≤–∞—Ä—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
animals = {
    "—Ç–∏–≥—Ä": {"—Å–∏–ª–∞": 6, "—Å–∫–æ—Ä–æ—Å—Ç—å": 8, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –∑–∞–º–∫–Ω—É—Ç—ã–π
    "–ø–∏–Ω–≥–≤–∏–Ω": {"—Å–∏–ª–∞": 1, "—Å–∫–æ—Ä–æ—Å—Ç—å": 3, "–¥–æ–±—Ä–æ—Ç–∞": 6, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 7},  # –ù–∏–∑–∫–∞—è —Å–∏–ª–∞, –≤—ã—Å–æ–∫–∞—è –¥–æ–±—Ä–æ—Ç–∞ –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    "—Å–ª–æ–Ω": {"—Å–∏–ª–∞": 9, "—Å–∫–æ—Ä–æ—Å—Ç—å": 1, "–¥–æ–±—Ä–æ—Ç–∞": 4, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 3},  # –°–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ, –º–µ–¥–ª–µ–Ω–Ω–æ–µ, —É–º–µ—Ä–µ–Ω–Ω–æ –¥–æ–±—Ä–æ–µ
    "–ª–∏—Å–∞": {"—Å–∏–ª–∞": 3, "—Å–∫–æ—Ä–æ—Å—Ç—å": 3, "–¥–æ–±—Ä–æ—Ç–∞": 8, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 3},  # –•–∏—Ç—Ä–∞—è, –±—ã—Å—Ç—Ä–∞—è –∏ –æ—á–µ–Ω—å –¥–æ–±—Ä–∞—è, –Ω–æ –º–µ–Ω–µ–µ –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è
    "–∑–º–µ—è": {"—Å–∏–ª–∞": 4, "—Å–∫–æ—Ä–æ—Å—Ç—å": 7, "–¥–æ–±—Ä–æ—Ç–∞": 1, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 1},  # –ë—ã—Å—Ç—Ä–∞—è, –Ω–æ –Ω–µ–¥–æ–±—Ä–∞—è –∏ –∑–∞–º–∫–Ω—É—Ç–∞—è
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@bot.message_handler(commands=['start'])
def start_quiz(message):
    chat_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–ø–µ–∫–∏
    intro_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ¬´–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?¬ª!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–ø–µ–∫–∏ –Ω–∞—à–µ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.\n\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–º–æ–≥—É—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–º—É –ª—É—á—à–∏–π —É—Ö–æ–¥, –ø–∏—Ç–∞–Ω–∏–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç. –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ!"
    )
    bot.send_message(chat_id, intro_message)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id] = {
        "scores": {"—Å–∏–ª–∞": 0, "—Å–∫–æ—Ä–æ—Å—Ç—å": 0, "–¥–æ–±—Ä–æ—Ç–∞": 0, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 0},
        "current_question": 0,
        "awaiting_feedback": False,
        "awaiting_email": False,
        "best_animal": None
    }
    ask_question(chat_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def ask_question(chat_id):
    user_info = user_data.get(chat_id)
    if not user_info or user_info["current_question"] >= len(questions):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        show_result(chat_id)
        return

    question = questions[user_info["current_question"]]
    keyboard = InlineKeyboardMarkup()
    for option in question["options"]:
        keyboard.add(InlineKeyboardButton(option, callback_data=option))

    bot.send_message(chat_id, question["text"], reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞
    sticker_id = question.get("sticker")
    if sticker_id:
        bot.send_sticker(chat_id, sticker_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call):
    chat_id = call.message.chat.id
    user_info = user_data.get(chat_id)

    if not user_info:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    answer = call.data
    current_question_index = user_info["current_question"]

    if current_question_index < len(questions):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –µ—â—ë –µ—Å—Ç—å
        question = questions[current_question_index]
        for key, value in question["options"][answer].items():
            user_info["scores"][key] += value

        user_info["current_question"] += 1
        ask_question(chat_id)
    else:
        button_handler(call)  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏

# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def show_result(chat_id):
    user_info = user_data.get(chat_id)
    if not user_info:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    scores = user_info["scores"]
    best_animal = min(animals, key=lambda animal: sum(abs(scores[key] - animals[animal][key]) for key in scores))

    result_message = f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {best_animal.capitalize()}! üéâ"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    image_path = os.path.join("images", f"{best_animal}.jpeg")
    if os.path.exists(image_path):
        with open(image_path, "rb") as photo:
            bot.send_photo(chat_id, photo, caption=result_message)
    else:
        bot.send_message(chat_id, result_message + "\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    # –ú–∏–Ω–∏-–∏–Ω—Ç—Ä–æ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –≤–º–µ—Å—Ç–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    patronage_intro = (
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å {best_animal.capitalize()} —á–µ—Ä–µ–∑ –Ω–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–ø–µ–∫–∏.\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∏ –ø–æ–º–æ–≥–∏—Ç–µ –≤–∞—à–µ–º—É —Ç–æ—Ç–µ–º–Ω–æ–º—É –∂–∏–≤–æ—Ç–Ω–æ–º—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )
    bot.send_message(chat_id, patronage_intro)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", switch_inline_query=f"–ú–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {best_animal}"),
        InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data="contact_zoo")
    )
    keyboard.row(
        InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", callback_data="restart_quiz"),
        InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")
    )
    keyboard.row(
        InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data="patronage_info")
    )

    bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def button_handler(call):
    chat_id = call.message.chat.id
    user_info = user_data.get(chat_id)
    if not user_info:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    if call.data == "contact_zoo":
        contact_zoo(chat_id)
    elif call.data == "restart_quiz":
        restart_quiz(chat_id)
    elif call.data == "leave_feedback":
        leave_feedback(chat_id)
    elif call.data == "patronage_info":
        show_patronage_info(chat_id)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ (–ø–æ–¥—Ä–æ–±–Ω—ã–π –±–ª–æ–∫)
def show_patronage_info(chat_id):
    patronage_info = (
        "üåü –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –∑–æ–æ–ø–∞—Ä–∫–∞:\n\n"
        "–°—Ç–∞–Ω—å—Ç–µ –æ–ø–µ–∫—É–Ω–æ–º —Å–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏ –ø–æ–º–æ–≥–∏—Ç–µ –µ–º—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞!\n\n"
        "–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏:\n"
        "- –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è –∏ —É—Ö–æ–¥–∞ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º.\n"
        "- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–µ—â–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∑–æ–æ–ø–∞—Ä–∫–µ.\n"
        "- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ –∂–∏–∑–Ω–∏ –≤–∞—à–µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ.\n"
        "- –£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –¥–ª—è –æ–ø–µ–∫—É–Ω–æ–≤.\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ email: zoo@example.com."
    )
    bot.send_message(chat_id, patronage_info)

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º (–∑–∞–ø—Ä–æ—Å email)
def contact_zoo(chat_id):
    user_info = user_data.get(chat_id)
    if not user_info:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    scores = user_info["scores"]
    best_animal = min(animals, key=lambda animal: sum(abs(scores[key] - animals[animal][key]) for key in scores))

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ email
    user_info["awaiting_email"] = True
    user_info["best_animal"] = best_animal
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("awaiting_email", False))
def handle_email(message):
    chat_id = message.chat.id
    email = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_info = user_data.get(chat_id)
    if not user_info:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info["email"] = email
    best_animal = user_info.get("best_animal", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ª–æ–≥–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ email)
    logger.info(f"User {chat_id} contacted the zoo with email: {email}, totem animal: {best_animal}")
    bot.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ! –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–æ–æ–ø–∞—Ä–∫–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
                              f"–û–Ω —É–∂–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî —ç—Ç–æ {best_animal.capitalize()}.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è email
    user_info["awaiting_email"] = False
    user_info.pop("best_animal", None)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def restart_quiz(chat_id):
    user_data[chat_id] = {  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "scores": {"—Å–∏–ª–∞": 0, "—Å–∫–æ—Ä–æ—Å—Ç—å": 0, "–¥–æ–±—Ä–æ—Ç–∞": 0, "–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 0},
        "current_question": 0,
        "awaiting_feedback": False,
        "awaiting_email": False,
        "best_animal": None
    }
    ask_question(chat_id)

# –ú–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def leave_feedback(chat_id):
    bot.send_message(chat_id, "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —É—á—Ç—ë–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è!")
    user_data[chat_id]["awaiting_feedback"] = True

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("awaiting_feedback", False))
def save_feedback(message):
    chat_id = message.chat.id
    feedback = message.text
    logger.info(f"Received feedback from user {chat_id}: {feedback}")
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –µ–≥–æ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞.")
    user_data[chat_id]["awaiting_feedback"] = False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling()